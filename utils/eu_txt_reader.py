"""
Copyright (c) 2019-2022, Zihao Ding/Carnegie Mellon University
All rights reserved.
********************************************************************

Project: eu_txt_reader.py

MODULE: util

Author: Zihao Ding, Carnegie Mellon University

Brief:
-------------
Read Euler angles from ctf/ang files and return corresponding orientations in form of quaternions


Date:
-------------
2022/03/17 ZD 1.0 public version
"""

import os
import re
from math import pi
import numpy as np
from .eu2qu import eu2qu

def eu_txt_reader(txt_dir, unit='deg'):
    '''
    Reading euler angles from ctf file generated by EMFitOrientation
    and transfer to orientations

    Input
    ----------------------------
    txt_dir: dir of txt file containing Euler angles
    unit: 'deg' or 'rad'

    Output
    ----------------------------
    orientations: ndarray, n*4
    '''
    assert os.path.exists(txt_dir), "txt file {} does not exist.".format(txt_dir) 
    p = re.compile(r'(\d+\.?\d*e-\d+|\d+\.?\d*)')

    def read():
        assert txt_dir.endswith('ang') or txt_dir.endswith('ctf'), 'The func only takes ctf and ang format'
        if txt_dir.endswith('ang'):
            N = 8
            sign = ' '
            rangeFunc = lambda x: x[:3]
            offset = np.array([0., 0., 0.])
        elif txt_dir.endswith('ctf'):
            N = 11
            sign = '\t'
            rangeFunc = lambda x: x[5:8]
            # need to add 90Â° to the first Euler angle to convert from Oxford to TSL convention
            offset = np.array([90., 0., 0.])
        coeff = 1 if unit == 'rad' else pi/180.
            
        with open(txt_dir, 'r') as f:
            for i in f.readlines():
                i_split = i.split(sign)
                if len(i_split) == N and i_split[0] != 'Phase':
                    numbers = [float(j) for j in rangeFunc(i_split)]
                    yield eu2qu((np.array(numbers) + offset) * coeff).reshape((1,4))
    
    orientations = np.concatenate([i for i in read()], axis=0)
    
    print('# of orientations generated: %d' % orientations.shape[0])
    return orientations